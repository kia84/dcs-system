/* encoding: UTF-8 */

/** hash_func.h, Ivan Korunkov, 2012 **/

/**
    Данный файл содержит переопределение хэш-функции,
    и несколько вспомогательных директив.
    В файле hash.c везде используется hashfunc(), а данное переопределение
    позволяет использовать в качестве хэш-функции любую внешнюю функцию, без 
    необходимости правки кода в нескольких местах.
**/

#ifndef	_HASH_FUNC_H
#define _HASH_FUNC_H

#include <stdint.h>    /* Содержит uint32_t и т.п. */

/* В данном случае мы используем быструю функцию hashlittle. */
#define hashfunc    hashlittle

/*
    Вспомогательные директивы (получены из hashlittle.c):
    hashsize - размер  хэша  по степени двойки;
    hashmask - битовая маска по степени двойки (по размеру таблицы, см. ниже).
    
    Создатель функции hashlittle рекомендует пользоваться hashmask, при
    необходимости использования менее 32 битов. Иными словами, если степень
    двойки, по которой подсчитан размер таблицы меньше 32 (а в нашем случае он
    заведомо меньше, т.к. при размере 2**32 даже незаполненная таблица уже
    будет занимать 16 GB памяти), то для получения корректного индекса,
    входящего в диапозон размера массива, нужно к значению, возвращаемому
    хэш-функцией применять hashmask.
        h = (h & hashmask(10));
    Где 10 - степень двойки, по которой построена хэш-таблица.
    В приведённом примере h будет входить в диапозон [0..9].
    Такое становится возможным потому, что размер таблицы всегда кратен
    степени двойки, таким образом можно не считать mod, а использовать маску
    дающую точно такой же результат.
    ---------------------------------------------------------------------------
    Так как размер хэш-таблицы закэширован в структуре HASH, то, в целях
    оптимизации, стандартное определение hashmask переопределено.
    Теперь hashmask вызывается от размера хэш-таблицы.
*/
#define hashsize(n) ((uint32_t) 1 << (n))
/* #define hashmask(n) (hashsize(n) - 1) */ /* original from lookup3.c */
#define hashmask(s) ((s) - 1)               /* optimize */

/* Хэш-функция. Подробнее в hashlittle.c или в lookup3.c */
uint32_t hashlittle(const void *key, size_t length, uint32_t initval);

#endif /* hash_func.h */
